/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.learningspring.courier.company.openapitools.api;

import com.learningspring.courier.company.openapitools.model.Customer;
import com.learningspring.courier.company.openapitools.model.CustomerInput;
import com.learningspring.courier.company.openapitools.model.Order;
import com.learningspring.courier.company.openapitools.model.OrderInput;
import com.learningspring.courier.company.openapitools.model.Tracking;
import com.learningspring.courier.company.openapitools.model.TrackingInput;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-05-20T02:17:06.878038300+02:00[Europe/Warsaw]")
@Validated
@Tag(name = "api", description = "the api API")
public interface ApiApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /api/customers/{customerId}/orders : Retrieve order history for a specific user
     *
     * @param customerId ID of the customer (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "apiCustomersCustomerIdOrdersGet",
        summary = "Retrieve order history for a specific user",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Order.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/customers/{customerId}/orders",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Order>> apiCustomersCustomerIdOrdersGet(
        @Parameter(name = "customerId", description = "ID of the customer", required = true, in = ParameterIn.PATH) @PathVariable("customerId") Integer customerId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"orderId\" : 0, \"courier\" : \"{}\", \"deliveryAddress\" : \"deliveryAddress\", \"pickupAddress\" : \"pickupAddress\", \"pickupDate\" : \"pickupDate\", \"customer\" : \"{}\", \"status\" : \"status\" }, { \"orderId\" : 0, \"courier\" : \"{}\", \"deliveryAddress\" : \"deliveryAddress\", \"pickupAddress\" : \"pickupAddress\", \"pickupDate\" : \"pickupDate\", \"customer\" : \"{}\", \"status\" : \"status\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/customers : Get a list of all customers
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "apiCustomersGet",
        summary = "Get a list of all customers",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Customer.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/customers",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Customer>> apiCustomersGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"address\" : \"address\", \"phoneNumber\" : \"phoneNumber\", \"customerId\" : 0, \"name\" : \"name\", \"email\" : \"email\" }, { \"address\" : \"address\", \"phoneNumber\" : \"phoneNumber\", \"customerId\" : 0, \"name\" : \"name\", \"email\" : \"email\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/customers/{id} : Delete a customer
     *
     * @param id ID of the customer (required)
     * @return No Content (status code 204)
     */
    @Operation(
        operationId = "apiCustomersIdDelete",
        summary = "Delete a customer",
        responses = {
            @ApiResponse(responseCode = "204", description = "No Content")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/customers/{id}"
    )
    default ResponseEntity<Void> apiCustomersIdDelete(
        @Parameter(name = "id", description = "ID of the customer", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/customers/{id} : Get details of a specific customer
     *
     * @param id ID of the customer (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "apiCustomersIdGet",
        summary = "Get details of a specific customer",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Customer.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/customers/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Customer> apiCustomersIdGet(
        @Parameter(name = "id", description = "ID of the customer", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"address\" : \"address\", \"phoneNumber\" : \"phoneNumber\", \"customerId\" : 0, \"name\" : \"name\", \"email\" : \"email\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/customers/{id} : Update an existing customer
     *
     * @param id ID of the customer (required)
     * @param customerInput  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "apiCustomersIdPut",
        summary = "Update an existing customer",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Customer.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/customers/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Customer> apiCustomersIdPut(
        @Parameter(name = "id", description = "ID of the customer", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(name = "CustomerInput", description = "", required = true) @Valid @RequestBody CustomerInput customerInput
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"address\" : \"address\", \"phoneNumber\" : \"phoneNumber\", \"customerId\" : 0, \"name\" : \"name\", \"email\" : \"email\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/customers : Add a new customer
     *
     * @param customerInput  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "apiCustomersPost",
        summary = "Add a new customer",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Customer.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/customers",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Customer> apiCustomersPost(
        @Parameter(name = "CustomerInput", description = "", required = true) @Valid @RequestBody CustomerInput customerInput
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"address\" : \"address\", \"phoneNumber\" : \"phoneNumber\", \"customerId\" : 0, \"name\" : \"name\", \"email\" : \"email\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/orders/{orderId} : Cancel an order by order ID
     *
     * @param orderId ID of the order (required)
     * @return No Content (status code 204)
     */
    @Operation(
        operationId = "apiOrdersOrderIdDelete",
        summary = "Cancel an order by order ID",
        responses = {
            @ApiResponse(responseCode = "204", description = "No Content")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/orders/{orderId}"
    )
    default ResponseEntity<Void> apiOrdersOrderIdDelete(
        @Parameter(name = "orderId", description = "ID of the order", required = true, in = ParameterIn.PATH) @PathVariable("orderId") Integer orderId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/orders/{orderId} : Retrieve order details by order ID
     *
     * @param orderId ID of the order (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "apiOrdersOrderIdGet",
        summary = "Retrieve order details by order ID",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Order.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/orders/{orderId}",
        produces = { "application/json" }
    )
    default ResponseEntity<Order> apiOrdersOrderIdGet(
        @Parameter(name = "orderId", description = "ID of the order", required = true, in = ParameterIn.PATH) @PathVariable("orderId") Integer orderId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"orderId\" : 0, \"courier\" : \"{}\", \"deliveryAddress\" : \"deliveryAddress\", \"pickupAddress\" : \"pickupAddress\", \"pickupDate\" : \"pickupDate\", \"customer\" : \"{}\", \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/orders/{orderId}/tracking : Retrieve real-time tracking information for an order
     *
     * @param orderId ID of the order (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "apiOrdersOrderIdTrackingGet",
        summary = "Retrieve real-time tracking information for an order",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Tracking.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/orders/{orderId}/tracking",
        produces = { "application/json" }
    )
    default ResponseEntity<Tracking> apiOrdersOrderIdTrackingGet(
        @Parameter(name = "orderId", description = "ID of the order", required = true, in = ParameterIn.PATH) @PathVariable("orderId") Integer orderId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"delivery\" : \"{}\", \"location\" : \"location\", \"trackingId\" : 0, \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/orders/{orderId}/tracking : Update the status and location of an order during delivery
     *
     * @param orderId ID of the order (required)
     * @param trackingInput  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "apiOrdersOrderIdTrackingPut",
        summary = "Update the status and location of an order during delivery",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Tracking.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/orders/{orderId}/tracking",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Tracking> apiOrdersOrderIdTrackingPut(
        @Parameter(name = "orderId", description = "ID of the order", required = true, in = ParameterIn.PATH) @PathVariable("orderId") Integer orderId,
        @Parameter(name = "TrackingInput", description = "", required = true) @Valid @RequestBody TrackingInput trackingInput
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"delivery\" : \"{}\", \"location\" : \"location\", \"trackingId\" : 0, \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/orders : Place a new order
     *
     * @param orderInput  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "apiOrdersPost",
        summary = "Place a new order",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Order.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/orders",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Order> apiOrdersPost(
        @Parameter(name = "OrderInput", description = "", required = true) @Valid @RequestBody OrderInput orderInput
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"orderId\" : 0, \"courier\" : \"{}\", \"deliveryAddress\" : \"deliveryAddress\", \"pickupAddress\" : \"pickupAddress\", \"pickupDate\" : \"pickupDate\", \"customer\" : \"{}\", \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
